import{j as e}from"./index-B5ed4Dao.js";/* empty css                  */const n=()=>e.jsxs("div",{className:"procedure-container",children:[e.jsx("h2",{className:"procedure-heading",children:"Procedure for Social Network Analysis"}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Choose Graph Type"}),e.jsxs("p",{children:["Decide how you want to build your network:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Adjacency Matrix:"})," Manually enter a 0/1 matrix to define connections."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Random Graph:"})," Let the system generate a connected “social network” automatically."]})]})]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Specify Number of Vertices"}),e.jsx("p",{children:"Enter how many nodes (people) your network should have (minimum 2, maximum 50). This determines the size of the matrix or the random graph."})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Input or Generate Connections"}),e.jsxs("p",{children:["Depending on your choice:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Adjacency Matrix:"})," Fill each cell with 1 (connected) or 0 (not connected). Diagonal entries are disabled since a node can’t connect to itself."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Random Graph:"})," Click “Generate Random Social Network” to auto‑create a connected graph with extra random and hub‑like connections."]})]})]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Render the Network"}),e.jsxs("p",{children:["If using the matrix, click ",e.jsx("strong",{children:"Generate Graph"}),". The network will appear in the SVG canvas, with nodes positioned by a force‑directed layout."]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Calculate Centrality Measures"}),e.jsxs("p",{children:["Click ",e.jsx("strong",{children:"Calculate Centrality Measures"})," to compute:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Degree Centrality:"})," How many direct connections each node has."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Closeness Centrality:"})," How close a node is to all others via shortest paths."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Betweenness Centrality:"})," How often a node sits on shortest paths between others."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Eigenvector Centrality:"})," Influence based on being connected to other influential nodes."]})]})]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Review Analysis Results"}),e.jsxs("p",{children:["Once computed, view:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Influencer Nodes:"})," Nodes with highest degree centrality, highlighted in red."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Maximum Degree:"})," The largest number of connections any node has."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Centrality Table:"})," A breakdown of all centrality scores per node."]})]})]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Save or Export Findings"}),e.jsx("p",{children:"Copy the table or take a screenshot for your report. You can also extend the code to export the results to CSV for further analysis."})]}),e.jsxs("div",{className:"note",children:[e.jsx("strong",{children:"Note:"})," When using the adjacency matrix, ensure every off‑diagonal cell is filled (0 or 1). For reproducibility, record your random seed or graph parameters."]})]});export{n as default};
