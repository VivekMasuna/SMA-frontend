import{j as e}from"./index-BMen7FYT.js";/* empty css                  */const n=()=>e.jsxs("div",{className:"procedure-container",children:[e.jsx("h2",{className:"procedure-heading",children:"Procedure for Graph Traversal & Shortest Paths"}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Select Graph Input Type"}),e.jsxs("p",{children:["Click one of the buttons: ",e.jsx("strong",{children:"Adjacency Matrix"}),", ",e.jsx("strong",{children:"Edge List"}),",",e.jsx("strong",{children:" Adjacency List"})," or ",e.jsx("strong",{children:"Random Graph"}),"."]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Specify Number of Vertices"}),e.jsx("p",{children:"If you chose Matrix, List or Edge List, enter the number of vertices. If you chose Random Graph, enter the number of vertices in the “Generate Random Graph” box."})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Provide Graph Data"}),e.jsxs("p",{children:["Depending on your choice:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Adjacency Matrix:"})," Fill each cell ","{i, j}"," with a non‑zero weight or leave blank for no edge."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Edge List:"})," For each row enter “From”, “To” and “Weight”."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Adjacency List:"})," For each vertex list neighbors (comma‑separated) and optionally weights."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Random Graph:"})," Click “Generate Random Graph” to auto‑build a connected weighted graph."]})]})]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Render the Graph"}),e.jsxs("p",{children:["Click ",e.jsx("strong",{children:"Generate Graph"})," (or “Generate Random Graph”) to visualize your network in the canvas."]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Choose a Start Node"}),e.jsx("p",{children:"In the “Start Node” box, enter a vertex index between 0 and N‑1 to begin traversals."})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Run Traversal Algorithms"}),e.jsxs("p",{children:["Use the three buttons:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Run DFS:"})," Depth‑first search, animates node and edge visits."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Run BFS:"})," Breadth‑first search, animates level‑order visits."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Run Dijkstra:"})," Computes shortest paths from the start node and displays distances and paths."]})]})]})]}),e.jsxs("div",{className:"procedure-step",children:[e.jsx("h3",{children:"🔹 Monitor Queues & Results"}),e.jsxs("p",{children:["As the algorithms run, observe:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"To Visit Queue:"})," Nodes scheduled next."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Visited Queue:"})," Nodes already processed."]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Traversal Results:"})," Final DFS/BFS order and Dijkstra’s distance/path summary."]})]})]})]}),e.jsxs("div",{className:"note",children:[e.jsx("strong",{children:"Note:"})," You must generate the graph before running any algorithm, and your start node must be valid (0 ≤ start < number of vertices)."]})]});export{n as default};
